// prisma/seed.ts
import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

interface SeedConfig {
  adminEmail: string;
  adminPassword: string;
}

function getSeedConfig(): SeedConfig {
  const adminEmail = process.env.ADMIN_EMAIL;
  const adminPassword = process.env.ADMIN_PASSWORD;

  if (!adminEmail || !adminPassword) {
    throw new Error(
      '‚ùå ADMIN_EMAIL and ADMIN_PASSWORD must be set in .env file for seeding\n' +
        'Example:\n' +
        'ADMIN_EMAIL=admin@example.com\n' +
        'ADMIN_PASSWORD=YourSecurePassword123'
    );
  }

  // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
  if (!adminEmail.includes('@')) {
    throw new Error('‚ùå ADMIN_EMAIL must be a valid email address');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  if (adminPassword.length < 8) {
    throw new Error('‚ùå ADMIN_PASSWORD must be at least 8 characters long');
  }

  return {
    adminEmail,
    adminPassword,
  };
}

async function createAdminUser(email: string, password: string) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const existingUser = await prisma.users.findUnique({
    where: { email },
  });

  if (existingUser) {
    console.log('‚ÑπÔ∏è Admin user already exists, updating password...');

    const hashedPassword = await bcrypt.hash(password, 12);
    await prisma.users.update({
      where: { email },
      data: {
        password: Buffer.from(hashedPassword),
        role_id: 1,
      },
    });

    return 'updated';
  } else {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hashedPassword = await bcrypt.hash(password, 12);

    await prisma.users.create({
      data: {
        email,
        password: Buffer.from(hashedPassword),
        role_id: 1,
      },
    });

    return 'created';
  }
}

async function main() {
  console.log('üå± Starting database seed...');

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const config = getSeedConfig();

  // –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
  console.log('üë• Creating roles...');
  const roles = [
    { id: 1, name: 'ADMIN' },
    { id: 2, name: 'USER' },
  ];

  for (const roleData of roles) {
    await prisma.roles.upsert({
      where: { id: roleData.id },
      update: roleData,
      create: roleData,
    });
  }

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  console.log('üì¶ Creating categories...');
  const categories = [
    { id: 1, name: 'toys' },
    { id: 2, name: 'stationery' },
  ];

  for (const categoryData of categories) {
    await prisma.categories.upsert({
      where: { id: categoryData.id },
      update: categoryData,
      create: categoryData,
    });
  }

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  console.log('üëë Creating admin user...');
  const action = await createAdminUser(config.adminEmail, config.adminPassword);

  console.log(`‚úÖ Admin user ${action} successfully`);
  console.log(`üìß Email: ${config.adminEmail}`);
  console.log('üîë Password: (from .env file)');
  console.log('üéâ Database seed completed successfully!');
}

main()
  .catch(error => {
    console.error('‚ùå Seed failed:', error.message);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
