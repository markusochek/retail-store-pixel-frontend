// lib/syncProducts/trigger.ts
import { prisma } from '@/lib/db/prisma';
import { configureEnhancedMeilisearch } from '@/lib/syncProducts/enhanced-settings';
import { syncEnhancedProductsToMeilisearch } from '@/lib/syncProducts/enhanced-sync';

export async function triggerSyncIfNeeded() {
  try {
    let lastSync;
    try {
      lastSync = await prisma.syncMetadata.findUnique({
        where: { key: 'last_meilisearch_sync' },
      });
    } catch (error) {
      console.log('SyncMetadata table might not be ready yet');
      lastSync = null;
    }

    const syncInterval = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 5
    const shouldSync =
      !lastSync || new Date().getTime() - new Date(lastSync.value).getTime() > syncInterval;

    if (shouldSync) {
      console.log('üîÑ Starting Meilisearch initialization...');

      // 1. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Meilisearch
      await configureEnhancedMeilisearch();

      // 2. –ó–∞—Ç–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
      await syncEnhancedProductsToMeilisearch();

      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      try {
        await prisma.syncMetadata.upsert({
          where: { key: 'last_meilisearch_sync' },
          update: { value: new Date().toISOString() },
          create: {
            key: 'last_meilisearch_sync',
            value: new Date().toISOString(),
          },
        });
      } catch (error) {
        console.log('Could not save sync metadata, table might not exist yet');
      }

      console.log('‚úÖ Meilisearch initialization completed');
    } else {
      console.log('‚è≠Ô∏è Sync not needed, last sync was:', lastSync?.value);
    }
  } catch (error) {
    console.error('‚ùå Error in triggerSyncIfNeeded:', error);
  }
}
